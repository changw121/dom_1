{"mappings":"AAAA,MAAM,CAAC,GAAG,GAAG;IACT,MAAM,EAAC,MAAM,EAAE;QACX,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC,AAAC;QACrD,2CAA2C;QAC3C,aAAa;QACb,SAAS,CAAC,SAAS,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;QACpC,kBAAkB;QAClB,OAAO,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC;KACvC;IACD,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC;QACb,sBAAsB;QACtB,2BAA2B;QAC3B,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;KACzD;IACD,MAAM,EAAC,IAAI,EAAC,KAAK,EAAC;QACd,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;KAC7C;IACD,MAAM,EAAC,MAAM,EAAE,IAAI,EAAE;QACjB,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;KAC5B;IACD,IAAI,EAAC,IAAI,EAAE,MAAM,EAAC;QACd,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,qBAAqB;QAC/C,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,yBAAyB;KACtD;IACD,MAAM,EAAC,IAAI,EAAC;QACR,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,kBAAkB;QACrD,OAAO,IAAI,CAAC;KACf;IACD,KAAK,EAAC,IAAI,EAAC;QACP,sEAAsE;QACtE,MAAM,KAAK,GAAG,EAAE;QAChB,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,AAAC;QACxB,MAAM,CAAC,CAAC;YACJ,iCAAiC;YACjC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACxC,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC;SACvB;QACD,OAAO,KAAK,CAAA;KACf;CACJ,CAAC","sources":["src/dom.js"],"sourcesContent":["window.dom = {\r\n    create(string) {\r\n        const container = document.createElement(\"template\");\r\n        //如果你传入的string前面有空格，那么string中第一个孩子就是空格形成的文本\r\n        //故要用trim去掉空格\r\n        container.innerHTML = string.trim();\r\n        //template拿到子元素的方法\r\n        return container.content.firstChild;\r\n    },    \r\n    after(node,node2){  //在node结点后面添加node2\r\n        //把node2插到node下一个结点的前面\r\n        //经验证：即使node没有下一个结点仍然可以插入成功\r\n        node.parentNode.insertBefore(node2, node.nextSibling);\r\n    },\r\n    before(node,node2){ //在node结点前面添加node2\r\n        node.parentNode.insertBefore(node2, node);\r\n    },    \r\n    append(parent, node) { //新增儿子节点\r\n        parent.appendChild(node);\r\n    },\r\n    wrap(node, parent){ //新增node的父节点parent\r\n        dom.before(node, parent); //先将parent结点插入到node前面\r\n        dom.append(parent, node); //再将node结点插入到parent的儿子节点上\r\n    },\r\n    remove(node){ //删除结点node\r\n        node.parentNode.removeChild(node); //让父节点删除它的儿子节点node\r\n        return node;\r\n    },\r\n    empty(node){ //删除node节点的所有儿子节点\r\n        // const {childNodes} = node  //等价于const childNodes = node.childNodes \r\n        const array = []\r\n        let x = node.firstChild;\r\n        while(x){\r\n            //由于我remove写了return，所以这里就可以直接push\r\n            array.push(dom.remove(node.firstChild)); \r\n            x = node.firstChild;\r\n        }\r\n        return array\r\n    }\r\n};"],"names":[],"version":3,"file":"index.755bdb92.js.map","sourceRoot":"/__parcel_source_root/"}